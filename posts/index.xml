<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Blog</title>
    <link>https://Jokernol.github.io/posts/</link>
    <description>Recent content in Posts on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 03 Jun 2021 12:47:17 +0800</lastBuildDate><atom:link href="https://Jokernol.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>解决Atmega328P中Flash容量过小问题的一些思考</title>
      <link>https://Jokernol.github.io/posts/%E8%A7%A3%E5%86%B3atmega328p%E4%B8%ADflash%E5%AE%B9%E9%87%8F%E8%BF%87%E5%B0%8F%E9%97%AE%E9%A2%98%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</link>
      <pubDate>Thu, 03 Jun 2021 12:47:17 +0800</pubDate>
      
      <guid>https://Jokernol.github.io/posts/%E8%A7%A3%E5%86%B3atmega328p%E4%B8%ADflash%E5%AE%B9%E9%87%8F%E8%BF%87%E5%B0%8F%E9%97%AE%E9%A2%98%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</guid>
      <description>由于Atmega328P中Flash的大小仅有32K，而在我们的设想中，除了基础的示波器功能外，还应当进行二次开发拓展更多的功能。就目前而言，示波器功能的实现已经占用了32K中的40%，余留的空间实在有限。所以该问题的解决迫在眉睫。
解决方案    方案一：    在最初的设想中，我们想到可以使用SD卡作为外部拓展。在程序中分配一块内存并将SD卡中的程序加载到该内存中，然后跳转至该位置。
void (*app_start)(void); void *pBin; void begin() { // allocate the memory for the sketch  pBin = malloc(512); app_start = pBin; // todo: copy the SD card file into pBin  // this executes the pBin code.  (*app_start)(); } // never gets called. void loop() { } 但由于Atmega328P采用Harvard架构，这意味着Flash和Memory在物理层面上是完全分离的，每个都有自己独立的地址空间，就连总线位宽甚至都不相同。所以简单的通过堆栈指针来试图运行从SD卡中读取出的数据并不可行。
方案二：    另一种解决方案是，重新编写Atmega328P的引导加载程序，使其从SD卡中读取十六进制文件，但这样做同样有其弊端，一是引导加载程序过于底层，就我们目前的水平而言，编写起来可能有些困难。二是若从SD卡中运行程序，与原先相比IO速率的相差可能达到一百倍甚至更多。对于敏感的示波器而言，这个问题可能会十分致命。
不过在搜寻资料的时候，有人提到，Arduino不允许用户代码从SRAM运行，但可以在其中运行一个解释器，比如bitlash。
同时也发现有人利用arduino实现了一个类似gameboy的游戏机(gamebuino)，使用的方式也是重写引导加载程序。
所以我想这两个项目可能会有一定的参考价值。
方案三：    方案三是最简单的，就是再加一块Atmega328P，然后控制电路通过按钮或是别的方式控制切换，从而实现不同的功能。但这个方法未免太不优雅，所以在设想中只能作为最后不得已时的备选方案。</description>
    </item>
    
    <item>
      <title>减小Arduino uno体积的一种可行方案</title>
      <link>https://Jokernol.github.io/posts/%E5%87%8F%E5%B0%8Farduino-uno%E4%BD%93%E7%A7%AF%E7%9A%84%E4%B8%80%E7%A7%8D%E5%8F%AF%E8%A1%8C%E6%96%B9%E6%A1%88/</link>
      <pubDate>Mon, 10 May 2021 13:15:07 +0800</pubDate>
      
      <guid>https://Jokernol.github.io/posts/%E5%87%8F%E5%B0%8Farduino-uno%E4%BD%93%E7%A7%AF%E7%9A%84%E4%B8%80%E7%A7%8D%E5%8F%AF%E8%A1%8C%E6%96%B9%E6%A1%88/</guid>
      <description>因我们开发的口袋示波器需要能够方便携带，而Arduino Uno 体积过大，不利于我们达到便携. 我们发现固定在面包板上的Arduino主要利用其微控制器，所以我们考虑使用其ATmega328P微控制器来替代Arduino以此减小体积.
其特色为使用了Pico Power 技术，可提供超低功耗和低功率睡眠模式，非常适合用于电池供电仪器。
​ATmega328P是一种基于AVR增强RISC架构的低功耗CMOS 8位微控制器。通过在单个时钟周期中执行强大的指令，ATmega328P实现了接近每兆赫1 MIPS的吞吐量，使系统设计者能够根据处理速度优化功耗。
​AVR核心结合了一个丰富的指令集和32个通用工作寄存器。所有32个寄存器都直接连接到算术逻辑单元（ALU），允许在一个时钟周期内执行的一条指令中访问两个独立的寄存器。 由此产生的架构比传统的CISC微控制器具有更高的代码效率，同时实现的吞吐量是传统CISC微控制器的十倍。
​基于独立ATmega328P的电路与基于Arduino里ATmega328P的电路的区别在于：在Arduino里的ATmega328P始终带有Arduino的引导程序，从而可以使用Arduino IDE对其进行编程。而独立的ATmega328P无法编程。所以为了能够使用Arduino IDE在ATmega328P上编程，我们将另购买的ATmega328P移植到面包板上时需要进行引导程序的烧录。ATmega328P引导程序烧录
​注意：ATmega328P的Vcc引脚上能施加的最大电压为6V，建议的工作电压在3.3V-5V。
​使用独立的ATmega328P还需要解决ATmega328P的供电运行和通信问题。
​供电有两个方案：
 ​方案一.使用9v或1.5v电池与7805稳压管进行供电   方案二.使用3.7V可充电锂电池以及充电模块搭配升压模块进行供电  ​为了缩小体积达到便携的目的，我们使用方案二
​在通信模块中，我们使用蓝牙或者USB转串口通信。
​由于材料限制，这里使用了USB to TTL转换接口，13pin输出使得绿色LED亮起</description>
    </item>
    
    <item>
      <title>关于SH1106</title>
      <link>https://Jokernol.github.io/posts/%E5%85%B3%E4%BA%8Esh1106/</link>
      <pubDate>Sun, 09 May 2021 14:19:11 +0800</pubDate>
      
      <guid>https://Jokernol.github.io/posts/%E5%85%B3%E4%BA%8Esh1106/</guid>
      <description>似乎SH1106只是SSD1306的一个改版,而就目前网络上的资料而言,SSD1306的使用者似乎更多.
Adafruit只提供了SSD1306的驱动(Adafruit_SSD1306),而SH1106只有一个基于该库修改的第三方库(Adafruit_SH1106)
SSD1306和SH1106之间只有一个小差异：SH1106控制器具有132x64像素的内部RAM。SSD1306仅具有128x64像素。
在具有SH1106控制器的标准128x64 OLED上遇到的第一个问题是：128x64窗口如何映射到132x64RAM?
在大多数情况下，128x64 OLED居中在132x64区域内，这意味着RAM中的像素（2,0）对应的是显示器上的像素（0,0）。
对于u8g2，SH1106的改动很小。我们只需要将显示移动2像素即可。
但使用Adafruit lib则较为复杂.主体函数 Adafruit_SSD1306 :: display（void）在很大程度上取决于硬件体系结构，并假定RAM区域的宽度为128（对于SH1106是错误的）。
因此若想将其移植到SH1106上则需要完全重写Adafruit_SSD1306 :: display（void）函数。
此外SSD1306还具有在SH1106上没有的扩展命令（例如滚动命令）。SH1106仅支持页面寻址模式。而SSD1306添加了特殊的水平和垂直寻址模式。
所以在我们后续的开发过程中，SH1106部分指令的缺失或许会是一个问题</description>
    </item>
    
    <item>
      <title>库文件的选用</title>
      <link>https://Jokernol.github.io/posts/%E5%BA%93%E6%96%87%E4%BB%B6%E7%9A%84%E9%80%89%E7%94%A8/</link>
      <pubDate>Sat, 08 May 2021 14:19:11 +0800</pubDate>
      
      <guid>https://Jokernol.github.io/posts/%E5%BA%93%E6%96%87%E4%BB%B6%E7%9A%84%E9%80%89%E7%94%A8/</guid>
      <description>本次项目我们选用了控制器为SH1106的1.3英寸OLED屏作为显示输出,但Adafruit官方并没有提供SH1106的驱动程序.
查阅相关资料发现对于SH1106,有两个可供选择的库,分别是u8g2和基于adafruit_SSD1306修改的第三方库.
Adafruit_SH1106 vs u8g2    Adafruit_SH1106    以下是该库的Readme描述
 Adafruit graphic library for SH1106 driver lcds.
some small oled lcd use SH1106 driver.
I change the adafruit SSD1306 to SH1106
SH1106 driver similar to SSD1306. thus, just change the display() method.
However, SH1106 driver don&amp;rsquo;t provide several functions such as scroll commands.
Adafruit-GFX-Library https://github.com/adafruit/Adafruit-GFX-Library
 关于sh1106,有一点需要提及。
官方Adafruit_GFX库选择在堆区域中分配图像缓存，而sh1106的作者Wonho-maker将其修改为全局储存区，即arduino内存概述中提到的静态数据(Static data)区域。
我们可以通过下方的程序来比较这两者之间的区别
/* Adafruit SSD1306和SH1106之间的内存消耗比较(byte) SSD1306 sketch=13082, global= 362, local=1686 SH1106 sketch=11190, global=1375, local= 673 */ #include &amp;lt;Wire.</description>
    </item>
    
    <item>
      <title>Arduino内存概述</title>
      <link>https://Jokernol.github.io/posts/arduino%E5%86%85%E5%AD%98%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Sat, 08 May 2021 14:02:22 +0800</pubDate>
      
      <guid>https://Jokernol.github.io/posts/arduino%E5%86%85%E5%AD%98%E6%A6%82%E8%BF%B0/</guid>
      <description>处理器/内存结构    在电子计算机的早期，出现了两种不同的处理器/内存结构：哈佛结构和冯诺依曼结构。
冯诺依曼结构    冯·诺依曼结构也称普林斯顿结构，是一种将程序指令存储器和数据存储器合并在一起的存储器结构。程序指令存储地址和数据存储地址指向同一个存储器的不同物理位置，因此程序指令和数据的宽度相同，如英特尔公司的8086中央处理器的程序指令和数据都是16位宽。
哈佛结构    哈佛结构是一种将程序指令存储和数据存储分开的存储器结构。哈佛结构是一种并行体系结构，它的主要特点是将程序和数据存储在不同的存储空间中，即程序存储器和数据存储器是两个独立的存储器，每个存储器独立编址、独立访问。中央处理器首先到程序指令存储器中读取程序指令内容，解码后得到数据地址，再到相应的数据存储器中读取数据，并进行下一步的操作（通常是执行）。程序指令存储和数据存储分开，可以使指令和数据有不同的数据宽度，如Microchip公司的PIC16芯片的程序指令是14位宽度，而数据是8位宽度。
优劣    每种架构都有其优势：在所有其他条件相同的情况下，哈佛模型在性能方面具有优势。冯·诺依曼模型更具有拓展性。
微控制器    诸如为Arduinos提供动力的微控制器是为嵌入式应用程序而设计的。与通用计算机不同，嵌入式处理器通常具有定义明确的任务，它必须以最低的成本可靠高效地执行，微控制器设计趋于精简。他们放弃了繁复的多层缓存和基于磁盘的虚拟内存系统，只保留了完成任务所必需的部分。
Arduino UNO 内存概述    事实证明，哈佛模型非常适合嵌入式应用程序。Arduino UNO中使用的Atmega 328使用的是相对纯粹的哈佛架构。程序存储在Flash中，而数据存储在SRAM中。
Arduino中有三种类型的内存：
 Flash SRAM EEPROM  Flash    Flash用于存储程序映像和所有初始化的数据。您可以从Flash执行程序代码，但不能从正在执行的代码修改Flash中的数据。要修改数据，必须首先将其复制到SRAM中。Flash和SD卡所使用的技术相同。它是非易失性的，因此在关闭系统电源后，您的程序仍将存在。
SRAM    SRAM(Static Random Access Memory)，可以被正在执行的程序读取和写入。 程序运行时，SRAM具有以下几种作用：
 静态数据(Static data) -为程序中所有全局变量和静态变量保留的空间 堆(Heap) -堆用于动态数据的分配，随着数据的不断分配，堆从静态数据的顶部向上增长 栈(Stack) -栈用于局部变量，并用于维护中断和函数调用的记录。栈从内存顶部开始向下扩展到堆。每个中断，函数调用和局部变量分配都会导致栈增长。而从中断或函数调用返回将回收该中断或函数使用的所有栈空间。  大部分的内存问题都源于堆栈冲突，当发生冲突时内存将会发生无法预知的损坏。较好的情况下，它会立即崩溃。而在其他情况下，冲突所导致的危害可能要到很久以后才会被注意到。所以我们必须谨慎。
EEPROM    EEPROM是另一种非易失性储存器，可以从正在执行的程序中读取或写入。但EEPROM只能一个字节一个字节的读取，所以使用起来有点尴尬。虽然它不能取代珍贵的SRAM,但有时会非常有用。
   种类 用途 容量 易失性 其他     Flash 程序，引导程序，只读用户数据 32KB(包括.</description>
    </item>
    
  </channel>
</rss>
