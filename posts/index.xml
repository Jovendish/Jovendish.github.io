<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Blog</title>
    <link>https://jokernol.github.io/posts/</link>
    <description>Recent content in Posts on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 07 May 2021 11:41:55 +0800</lastBuildDate><atom:link href="https://jokernol.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Arduino内存概述</title>
      <link>https://jokernol.github.io/posts/arduino%E5%86%85%E5%AD%98%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Fri, 07 May 2021 11:41:55 +0800</pubDate>
      
      <guid>https://jokernol.github.io/posts/arduino%E5%86%85%E5%AD%98%E6%A6%82%E8%BF%B0/</guid>
      <description>处理器/内存结构    在电子计算机的早期，出现了两种不同的处理器/内存结构：哈佛结构和冯诺依曼结构。
冯诺依曼结构    冯·诺依曼结构也称普林斯顿结构，是一种将程序指令存储器和数据存储器合并在一起的存储器结构。程序指令存储地址和数据存储地址指向同一个存储器的不同物理位置，因此程序指令和数据的宽度相同，如英特尔公司的8086中央处理器的程序指令和数据都是16位宽。
哈佛结构    哈佛结构是一种将程序指令存储和数据存储分开的存储器结构。哈佛结构是一种并行体系结构，它的主要特点是将程序和数据存储在不同的存储空间中，即程序存储器和数据存储器是两个独立的存储器，每个存储器独立编址、独立访问。中央处理器首先到程序指令存储器中读取程序指令内容，解码后得到数据地址，再到相应的数据存储器中读取数据，并进行下一步的操作（通常是执行）。程序指令存储和数据存储分开，可以使指令和数据有不同的数据宽度，如Microchip公司的PIC16芯片的程序指令是14位宽度，而数据是8位宽度。
优劣    每种架构都有其优势：在所有其他条件相同的情况下，哈佛模型在性能方面具有优势。冯·诺依曼模型更具有拓展性。
微控制器    诸如为Arduinos提供动力的微控制器是为嵌入式应用程序而设计的。与通用计算机不同，嵌入式处理器通常具有定义明确的任务，它必须以最低的成本可靠高效地执行，微控制器设计趋于精简。他们放弃了繁复的多层缓存和基于磁盘的虚拟内存系统，只保留了完成任务所必需的部分。
Arduino UNO 内存概述    事实证明，哈佛模型非常适合嵌入式应用程序。Arduino UNO中使用的Atmega 328使用的是相对纯粹的哈佛架构。程序存储在Flash中，而数据存储在SRAM中。
Arduino中有三种类型的内存：
 Flash SRAM EEPROM  Flash    Flash用于存储程序映像和所有初始化的数据。您可以从Flash执行程序代码，但不能从正在执行的代码修改Flash中的数据。要修改数据，必须首先将其复制到SRAM中。Flash和SD卡所使用的技术相同。它是非易失性的，因此在关闭系统电源后，您的程序仍将存在。
SRAM    SRAM(Static Random Access Memory)，可以被正在执行的程序读取和写入。 程序运行时，SRAM具有以下几种作用：
 静态数据(Static data) -为程序中所有全局变量和静态变量保留的空间 堆(Heap) -堆用于动态数据的分配，随着数据的不断分配，堆从静态数据的顶部向上增长 栈(Stack) -栈用于局部变量，并用于维护中断和函数调用的记录。栈从内存顶部开始向下扩展到堆。每个中断，函数调用和局部变量分配都会导致栈增长。而从中断或函数调用返回将回收该中断或函数使用的所有栈空间。  大部分的内存问题都源于堆栈冲突，当发生冲突时内存将会发生无法预知的损坏。较好的情况下，它会立即崩溃。而在其他情况下，冲突所导致的危害可能要到很久以后才会被注意到。所以我们必须谨慎。
EEPROM    EEPROM是另一种非易失性储存器，可以从正在执行的程序中读取或写入。但EEPROM只能一个字节一个字节的读取，所以使用起来有点尴尬。虽然它不能取代珍贵的SRAM,但有时会非常有用。
   种类 用途 容量 易失性 其他     Flash 程序，引导程序，只读用户数据 32KB(包括.</description>
    </item>
    
  </channel>
</rss>
